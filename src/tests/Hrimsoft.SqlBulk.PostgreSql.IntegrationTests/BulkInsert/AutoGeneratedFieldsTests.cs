using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Hrimsoft.SqlBulk.PostgreSql.IntegrationTests.TestModels;
using Microsoft.Extensions.Logging.Abstractions;
using Moq;
using Npgsql;
using NUnit.Framework;

namespace Hrimsoft.SqlBulk.PostgreSql.IntegrationTests.BulkInsert
{
    public class AutoGeneratedFieldsTests
    {
        private readonly TestConfiguration _configuration;

        private IPostgreSqlBulkService _testService;
        private SimpleEntityProfile    _profile;

        public AutoGeneratedFieldsTests()
        {
            _configuration = new TestConfiguration();
        }

        [SetUp]
        public async Task SetUp()
        {
            var truncateSimpleTestEntity = "truncate \"unit_tests\".\"simple_test_entity\";";
            var resetIdSequenceCmd       = "ALTER SEQUENCE \"unit_tests\".\"simple_test_entity_id_seq\" RESTART WITH 1;";

            await using var connection              = new NpgsqlConnection(_configuration.ConnectionString);
            await using var commandSimpleTestEntity = new NpgsqlCommand($"{truncateSimpleTestEntity}{resetIdSequenceCmd}", connection);
            await connection.OpenAsync();
            await commandSimpleTestEntity.ExecuteNonQueryAsync();

            var bulkServiceOptions = new BulkServiceOptions();
            _profile = new SimpleEntityProfile();
            bulkServiceOptions.AddEntityProfile<TestEntity>(_profile);

            var insertCommandBuilder = new InsertSqlCommandBuilder(NullLoggerFactory.Instance);
            var deleteCommandBuilder = new Mock<IDeleteSqlCommandBuilder>().Object;
            var updateCommandBuilder = new Mock<IUpdateSqlCommandBuilder>().Object;
            var upsertCommandBuilder = new UpsertSqlCommandBuilder(NullLoggerFactory.Instance);

            _testService = new NpgsqlCommandsBulkService(
                bulkServiceOptions,
                NullLoggerFactory.Instance,
                insertCommandBuilder,
                updateCommandBuilder,
                deleteCommandBuilder,
                upsertCommandBuilder);
        }

        [Test]
        public async Task Insert_should_update_autogenerated_fields()
        {
            var elements = new List<TestEntity>
                           {
                               new TestEntity {RecordId = "rec-01", SensorId = "sens-01", Value = 127},
                               new TestEntity {RecordId = "rec-02", SensorId = "sens-01", Value = 128},
                               new TestEntity {RecordId = "rec-01", SensorId = "sens-02", Value = 227},
                               new TestEntity {RecordId = "rec-02", SensorId = "sens-02", Value = 228}
                           };
            await using var connection = new NpgsqlConnection(_configuration.ConnectionString);
            await _testService.InsertAsync(connection, elements, CancellationToken.None);

            Assert.AreEqual(1, elements[0].Id);
            Assert.AreEqual("rec-01", elements[0].RecordId);
            Assert.AreEqual("sens-01", elements[0].SensorId);
            Assert.AreEqual(127, elements[0].Value);

            Assert.AreEqual(2, elements[1].Id);
            Assert.AreEqual("rec-02", elements[1].RecordId);
            Assert.AreEqual("sens-01", elements[1].SensorId);
            Assert.AreEqual(128, elements[1].Value);

            Assert.AreEqual(3, elements[2].Id);
            Assert.AreEqual("rec-01", elements[2].RecordId);
            Assert.AreEqual("sens-02", elements[2].SensorId);
            Assert.AreEqual(227, elements[2].Value);

            Assert.AreEqual(4, elements[3].Id);
            Assert.AreEqual("rec-02", elements[3].RecordId);
            Assert.AreEqual("sens-02", elements[3].SensorId);
            Assert.AreEqual(228, elements[3].Value);
        }
        
        [Test]
        public async Task Insert_should_update_autogenerated_fields_in_massive_update()
        {
            const int ELEMENTS_COUNT = 70_000;

            var elements = new List<TestEntity>(ELEMENTS_COUNT);
            for (int i = 0; i < ELEMENTS_COUNT; i++) {
                elements.Add(new TestEntity {RecordId = $"rec-{i}", SensorId = $"sens-{i}", Value = i + 1});
            }
            await using var connection = new NpgsqlConnection(_configuration.ConnectionString);
            await _testService.InsertAsync(connection, elements, CancellationToken.None);
            for (var i = 0; i < ELEMENTS_COUNT; i++) {
                Assert.AreEqual(i + 1, elements[i].Id, $"element in index {i} has wrong Id");
            }
        }
    }
}