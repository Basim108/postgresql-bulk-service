using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Hrimsoft.SqlBulk.PostgreSql.IntegrationTests.TestModels;
using Microsoft.Extensions.Logging.Abstractions;
using Moq;
using Npgsql;
using NUnit.Framework;

namespace Hrimsoft.SqlBulk.PostgreSql.IntegrationTests.BulkUpdate
{
    public class BulkUpdateTests
    {
        private readonly TestConfiguration _configuration;

        private IPostgreSqlBulkService _testService;
        private BulkServiceOptions     _bulkServiceOptions;

        public BulkUpdateTests()
        {
            _configuration = new TestConfiguration();
        }

        [SetUp]
        public async Task SetUp()
        {
            var truncateTableCmd   = "truncate \"unit_tests\".\"bulk_test_entity\";";
            var resetIdSequenceCmd = "ALTER SEQUENCE \"unit_tests\".\"bulk_test_entity_id_seq\" RESTART WITH 1;";

            await using var connection = new NpgsqlConnection(_configuration.ConnectionString);
            await using var command    = new NpgsqlCommand($"{truncateTableCmd}{resetIdSequenceCmd}", connection);
            await connection.OpenAsync();
            await command.ExecuteNonQueryAsync();

            _bulkServiceOptions = new BulkServiceOptions();
            _bulkServiceOptions.AddEntityProfile<TestEntity>(new BulkEntityProfile());

            var insertCommandBuilder = new InsertSqlCommandBuilder(NullLoggerFactory.Instance);
            var deleteCommandBuilder = new Mock<IDeleteSqlCommandBuilder>().Object;
            var updateCommandBuilder = new UpdateSqlCommandBuilder(NullLoggerFactory.Instance);
            var upsertCommandBuilder = new UpsertSqlCommandBuilder(NullLoggerFactory.Instance);

            _testService = new NpgsqlCommandsBulkService(
                _bulkServiceOptions,
                NullLoggerFactory.Instance,
                insertCommandBuilder,
                updateCommandBuilder,
                deleteCommandBuilder,
                upsertCommandBuilder);
        }

        [Test]
        public async Task Update_should_update_autogenerated_fields()
        {
            var elements = new List<TestEntity>
                           {
                               new TestEntity {RecordId = "rec-01", SensorId = "sens-01", Value = 127},
                               new TestEntity {RecordId = "rec-02", SensorId = "sens-01", Value = 128}
                           };
            await using var connection = new NpgsqlConnection(_configuration.ConnectionString);
            await _testService.InsertAsync(connection, elements, CancellationToken.None);

            var firstId  = elements[0].Id;
            var secondId = elements[1].Id;
            elements[0].Value = 1;
            elements[1].Value = 2;

            await _testService.UpdateAsync(connection, elements, CancellationToken.None);

            Assert.AreEqual(firstId, elements[0].Id);
            Assert.AreEqual(1, elements[0].Value);

            Assert.AreEqual(secondId, elements[1].Id);
            Assert.AreEqual(2, elements[1].Value);
        }

        [Test]
        [Ignore("Should run manually")]
        public async Task Update_should_update_more_than_65K_items()
        {
            var elements = new List<TestEntity>(70_000);
            for (var i = 0; i < 70_000; i++)
            {
                elements.Add(new TestEntity
                             {
                                 RecordId = $"rec-{i}",
                                 SensorId = $"sens-{i}",
                                 Value    = 127 + i
                             });
            }
            await using var connection = new NpgsqlConnection(_configuration.ConnectionString);
            await _testService.InsertAsync(connection, elements, CancellationToken.None);

            for (var i = 0; i < 70_000; i++)
            {
                elements[i].Value -= 127;
            }

            await _testService.UpdateAsync(connection, elements, CancellationToken.None);

            for (var i = 0; i < 70_000; i++)
            {
                Assert.AreEqual(i, elements[i].Value);
            }
        }

        [Test]
        public async Task Update_should_split_correctly_even_number_of_elements()
        {
            _bulkServiceOptions.MaximumSentElements = 2;

            var elements = new List<TestEntity>
                           {
                               new TestEntity {RecordId = "rec-01", SensorId = "sens-01", Value = 127},
                               new TestEntity {RecordId = "rec-02", SensorId = "sens-01", Value = 128},
                               new TestEntity {RecordId = "rec-01", SensorId = "sens-02", Value = 227},
                               new TestEntity {RecordId = "rec-02", SensorId = "sens-02", Value = 228}
                           };
            await using var connection = new NpgsqlConnection(_configuration.ConnectionString);
            await _testService.InsertAsync(connection, elements, CancellationToken.None);

            var firstId  = elements[0].Id;
            var secondId = elements[1].Id;
            var thirdId  = elements[2].Id;
            var fourthId = elements[3].Id;
            elements[0].Value = 1;
            elements[1].Value = 2;
            elements[2].Value = 3;
            elements[3].Value = 4;

            await _testService.UpdateAsync(connection, elements, CancellationToken.None);

            Assert.AreEqual(firstId, elements[0].Id);
            Assert.AreEqual(1, elements[0].Value);

            Assert.AreEqual(secondId, elements[1].Id);
            Assert.AreEqual(2, elements[1].Value);

            Assert.AreEqual(thirdId, elements[2].Id);
            Assert.AreEqual(3, elements[2].Value);

            Assert.AreEqual(fourthId, elements[3].Id);
            Assert.AreEqual(4, elements[3].Value);
        }

        [Test]
        public async Task Update_should_split_correctly_odd_number_of_elements()
        {
            _bulkServiceOptions.MaximumSentElements = 2;

            var elements = new List<TestEntity>
                           {
                               new TestEntity {RecordId = "rec-01", SensorId = "sens-01", Value = 127},
                               new TestEntity {RecordId = "rec-02", SensorId = "sens-01", Value = 128},
                               new TestEntity {RecordId = "rec-01", SensorId = "sens-02", Value = 227},
                           };
            await using var connection = new NpgsqlConnection(_configuration.ConnectionString);
            await _testService.InsertAsync(connection, elements, CancellationToken.None);

            var firstId  = elements[0].Id;
            var secondId = elements[1].Id;
            var thirdId  = elements[2].Id;
            elements[0].Value = 1;
            elements[1].Value = 2;
            elements[2].Value = 3;

            await _testService.UpdateAsync(connection, elements, CancellationToken.None);

            Assert.AreEqual(firstId, elements[0].Id);
            Assert.AreEqual(1, elements[0].Value);

            Assert.AreEqual(secondId, elements[1].Id);
            Assert.AreEqual(2, elements[1].Value);

            Assert.AreEqual(thirdId, elements[2].Id);
            Assert.AreEqual(3, elements[2].Value);
        }
    }
}