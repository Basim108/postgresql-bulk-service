using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Hrimsoft.SqlBulk.PostgreSql.IntegrationTests.TestModels;
using Microsoft.Extensions.Logging.Abstractions;
using Moq;
using Npgsql;
using NUnit.Framework;

namespace Hrimsoft.SqlBulk.PostgreSql.IntegrationTests.BulkDelete
{
    public class SimpleBulkDeleteIntegrationTests
    {
        private readonly TestConfiguration _configuration;
        private readonly TestUtils         _testUtils;

        private SimpleEntityProfile       _entityProfile;
        private NpgsqlCommandsBulkService _testService;

        public SimpleBulkDeleteIntegrationTests()
        {
            _configuration = new TestConfiguration();
            _testUtils     = new TestUtils(_configuration);
        }

        [SetUp]
        public async Task SetUp()
        {
            var truncateTableCmd   = "truncate \"unit_tests\".\"simple_test_entity\";";
            var resetIdSequenceCmd = "ALTER SEQUENCE \"unit_tests\".\"simple_test_entity_id_seq\" RESTART WITH 1;";

            await using var connection = new NpgsqlConnection(_configuration.ConnectionString);
            await using var command    = new NpgsqlCommand($"{truncateTableCmd}{resetIdSequenceCmd}", connection);
            await connection.OpenAsync();
            await command.ExecuteNonQueryAsync();

            var bulkServiceOptions = new BulkServiceOptions();
            _entityProfile = new SimpleEntityProfile();
            bulkServiceOptions.AddEntityProfile<TestEntity>(_entityProfile);

            var insertCommandBuilder = new InsertSqlCommandBuilder(NullLoggerFactory.Instance);
            var updateCommandBuilder = new Mock<IUpdateSqlCommandBuilder>().Object;
            var deleteCommandBuilder = new SimpleDeleteSqlCommandBuilder(NullLoggerFactory.Instance);
            var upsertCommandBuilder = new Mock<IUpsertSqlCommandBuilder>().Object;

            _testService = new NpgsqlCommandsBulkService(
                bulkServiceOptions,
                NullLoggerFactory.Instance,
                insertCommandBuilder,
                updateCommandBuilder,
                deleteCommandBuilder,
                upsertCommandBuilder);
        }

        [Test]
        public async Task SimpleDelete_should_update_autogenerated_fields()
        {
            var elements = new List<TestEntity>
                           {
                               new TestEntity {RecordId = "rec-01", SensorId = "sens-01", Value = 127},
                               new TestEntity {RecordId = "rec-02", SensorId = "sens-01", Value = 128}
                           };
            using (var connection = new NpgsqlConnection(_configuration.ConnectionString))
            {
                await _testService.InsertAsync(connection, elements, CancellationToken.None);
                await _testService.DeleteAsync(connection, elements, CancellationToken.None);
            }

            var countOfRows = await _testUtils.HowManyRowsWithIdsAsync(_entityProfile, new[] {elements[0].Id, elements[1].Id});
            Assert.AreEqual(0, countOfRows);
        }

        [Test]
        public async Task SimpleDelete_should_split_correctly_even_number_of_elements()
        {
            var elements = new List<TestEntity>
                           {
                               new TestEntity {RecordId = "rec-01", SensorId = "sens-01", Value = 127},
                               new TestEntity {RecordId = "rec-02", SensorId = "sens-01", Value = 128},
                               new TestEntity {RecordId = "rec-01", SensorId = "sens-02", Value = 227},
                               new TestEntity {RecordId = "rec-02", SensorId = "sens-02", Value = 228}
                           };
            using (var connection = new NpgsqlConnection(_configuration.ConnectionString))
            {
                await _testService.InsertAsync(connection, elements, CancellationToken.None);
                await _testService.DeleteAsync(connection, elements, CancellationToken.None);
            }

            var countOfRows = await _testUtils.HowManyRowsWithIdsAsync(_entityProfile, new[] {elements[0].Id, elements[1].Id, elements[2].Id, elements[3].Id});
            Assert.AreEqual(0, countOfRows);
        }

        [Test]
        public async Task SimpleDelete_should_split_correctly_odd_number_of_elements()
        {
            var elements = new List<TestEntity>
                           {
                               new TestEntity {RecordId = "rec-01", SensorId = "sens-01", Value = 127},
                               new TestEntity {RecordId = "rec-02", SensorId = "sens-01", Value = 128},
                               new TestEntity {RecordId = "rec-01", SensorId = "sens-02", Value = 227},
                           };
            using (var connection = new NpgsqlConnection(_configuration.ConnectionString))
            {
                await _testService.InsertAsync(connection, elements, CancellationToken.None);
                await _testService.DeleteAsync(connection, elements, CancellationToken.None);
            }

            var countOfRows = await _testUtils.HowManyRowsWithIdsAsync(_entityProfile, new[] {elements[0].Id, elements[1].Id, elements[2].Id});
            Assert.AreEqual(0, countOfRows);
        }

        [Test]
        public async Task SimpleDelete_should_delete_elements_with_multiple_pk()
        {
            var bulkServiceOptions = new BulkServiceOptions();
            var profile = new EntityProfile(typeof(TestEntity));
            profile.HasProperty<TestEntity, int>(x => x.Id)
                   .ThatIsPrivateKey()
                   .ThatIsAutoGenerated();
            profile.HasProperty<TestEntity, string>(x => x.RecordId)
                   .ThatIsPrivateKey();
            profile.HasProperty<TestEntity, int>(x => x.Value);
            profile.ToTable("simple_test_entity", "unit_tests");
            bulkServiceOptions.AddEntityProfile<TestEntity>(profile);

            var insertCommandBuilder = new InsertSqlCommandBuilder(NullLoggerFactory.Instance);
            var updateCommandBuilder = new Mock<IUpdateSqlCommandBuilder>().Object;
            var deleteCommandBuilder = new SimpleDeleteSqlCommandBuilder(NullLoggerFactory.Instance);
            var upsertCommandBuilder = new Mock<IUpsertSqlCommandBuilder>().Object;

            _testService = new NpgsqlCommandsBulkService(
                bulkServiceOptions,
                NullLoggerFactory.Instance,
                insertCommandBuilder,
                updateCommandBuilder,
                deleteCommandBuilder,
                upsertCommandBuilder);
            
            var elements = new List<TestEntity>
                           {
                               new TestEntity {RecordId = "rec-01", SensorId = "sens-01", Value = 127},
                               new TestEntity {RecordId = "rec-02", SensorId = "sens-01", Value = 128},
                               new TestEntity {RecordId = "rec-01", SensorId = "sens-02", Value = 227},
                           };
            await using var connection = new NpgsqlConnection(_configuration.ConnectionString);
            await _testService.InsertAsync(connection, elements, CancellationToken.None);
            await _testService.DeleteAsync(connection, elements, CancellationToken.None);

            var countOfRows = await _testUtils.HowManyRowsWithIdsAsync(_entityProfile, new[] {elements[0].Id, elements[1].Id, elements[2].Id});
            Assert.AreEqual(0, countOfRows);
        }
    }
}