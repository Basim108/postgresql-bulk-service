using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading;
using Hrimsoft.SqlBulk.PostgreSql.Tests.TestModels;
using Microsoft.Extensions.Logging.Abstractions;
using NUnit.Framework;

namespace Hrimsoft.SqlBulk.PostgreSql.Tests.UpsertSqlCommandBuilderService
{
    public class CommonUpsertCommandTests
    {
        private UpsertSqlCommandBuilder _testService;

        [SetUp]
        public void SetUp()
        {
            _testService = new UpsertSqlCommandBuilder(NullLoggerFactory.Instance);
        }
        
        [Test]
        public void Should_match_upsert_cmd_of_one_element()
        {
            var entityProfile = new EntityProfile(typeof(TestEntity));
            entityProfile.HasProperty<TestEntity, int>(entity => entity.Id)
                .ThatIsAutoGenerated()
                .ThatIsPrivateKey();
            entityProfile.HasPropertyAsPartOfUniqueConstraint<TestEntity, string>(entity => entity.RecordId);
            entityProfile.HasPropertyAsPartOfUniqueConstraint<TestEntity, string>(entity => entity.SensorId);
            entityProfile.HasProperty<TestEntity, int>(entity => entity.IntValue);
            
            var elements = new List<TestEntity>
            {
                new TestEntity{ RecordId = "rec-01", SensorId = "sens-01", IntValue = 127 },
            };
            var commands = _testService.Generate(elements, entityProfile, CancellationToken.None);
            Assert.NotNull(commands);
            Assert.AreEqual(1, commands.Count);
            var commandResult = commands.First();
            Assert.NotNull(commandResult.Command);

            Assert.IsTrue(Regex.IsMatch(commandResult.Command, UpsertConsts.UPSERT_PATTERN, RegexOptions.IgnoreCase));
        }
        
        [Test]
        public void Should_match_upsert_cmd_of_many_elements()
        {
            var entityProfile = new EntityProfile(typeof(TestEntity));
            entityProfile.HasProperty<TestEntity, int>(entity => entity.Id)
                .ThatIsAutoGenerated()
                .ThatIsPrivateKey();
            entityProfile.HasPropertyAsPartOfUniqueConstraint<TestEntity, string>(entity => entity.RecordId);
            entityProfile.HasPropertyAsPartOfUniqueConstraint<TestEntity, string>(entity => entity.SensorId);
            entityProfile.HasProperty<TestEntity, int>(entity => entity.IntValue);
            
            var elements = new List<TestEntity>
            {
                new TestEntity{ RecordId = "rec-01", SensorId = "sens-01", IntValue = 127 },
                new TestEntity{ RecordId = "rec-02", SensorId = "sens-01", IntValue = 128 },
                new TestEntity{ RecordId = "rec-01", SensorId = "sens-02", IntValue = 227 },
                new TestEntity{ RecordId = "rec-02", SensorId = "sens-02", IntValue = 228 }
            };
            var commands = _testService.Generate(elements, entityProfile, CancellationToken.None);
            Assert.NotNull(commands);
            Assert.AreEqual(1, commands.Count);
            var commandResult = commands.First();
            
            Assert.NotNull(commandResult.Command);

            Assert.IsTrue(Regex.IsMatch(commandResult.Command, UpsertConsts.UPSERT_PATTERN, RegexOptions.IgnoreCase));
        }
    }
}