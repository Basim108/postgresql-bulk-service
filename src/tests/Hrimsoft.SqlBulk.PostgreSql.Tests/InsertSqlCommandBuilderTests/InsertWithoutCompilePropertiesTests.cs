using System.Collections.Generic;
using System.Threading;
using Hrimsoft.SqlBulk.PostgreSql.Tests.TestModels;
using Microsoft.Extensions.Logging.Abstractions;
using NUnit.Framework;

namespace Hrimsoft.SqlBulk.PostgreSql.Tests
{
    public class InsertWithoutCompilePropertiesTests
    {
        private EntityProfile           _entityProfile;
        private InsertSqlCommandBuilder _testService;

        private const string INSERT_PATTERN =
            @"insert\s+into\s+(""\w+"".)?""\w+""\s*\(\s*""\w+""(,\s*""\w+"")*\s*\)\s*values\s*\(\s*@param_\w+_\d+\s*,\s*@param_\w+_\d+,\s*@param_\w+_\d+\s*\)\s*(,\s*\(\s*@param_\w+_\d+\s*,\s*@param_\w+_\d+,\s*@param_\w+_\d+\s*\))*\s*(returning\s+""\w+""\s*(,\s*""\w+"")*)?;";

        [SetUp]
        public void SetUp()
        {
            _testService   = new InsertSqlCommandBuilder(NullLoggerFactory.Instance);
            _entityProfile = new EntityProfile(typeof(TestEntity));
            _entityProfile.ToTable("test_entity", "custom");
            _entityProfile.HasProperty<TestEntity, int>(x => x.Id)
                          .ThatIsPrivateKey()
                          .ThatIsAutoGenerated();
        }

        [Test]
        public void Insert_should_not_compile_int_properties()
        {
            _entityProfile.HasProperty<TestEntity, int>(x => x.IntValue);
            _entityProfile.HasProperty<TestEntity, string>(x => x.RecordId);

            var elements = new List<TestEntity>
                           {
                               new TestEntity {IntValue = 127, RecordId = "ddd"},
                           };
            var commandResult = _testService.Generate(elements, _entityProfile, CancellationToken.None);
            Assert.NotNull(commandResult.Command);
            Assert.IsTrue(commandResult.Command.Contains("127"));
            Assert.IsFalse(commandResult.Command.Contains("@param_value_"));
        }

        [Test]
        public void Insert_should_not_compile_nullable_int_properties()
        {
            _entityProfile.HasProperty<EntityWithNullableProperty, int?>(x => x.NullableInt);

            var elements = new List<EntityWithNullableProperty>
                           {
                               new EntityWithNullableProperty {NullableInt = 127},
                               new EntityWithNullableProperty {NullableInt = null},
                           };
            var commandResult = _testService.Generate(elements, _entityProfile, CancellationToken.None);
            Assert.NotNull(commandResult.Command);
            Assert.IsTrue(commandResult.Command.Contains("127"));
            Assert.IsTrue(commandResult.Command.Contains("null"));
            Assert.IsFalse(commandResult.Command.Contains("@param_"));
        }

        [Test]
        public void Insert_should_not_compile_short_properties()
        {
            _entityProfile.HasProperty<TestEntity, short>(x => x.ShortValue);

            var elements = new List<TestEntity>
                           {
                               new TestEntity {ShortValue = 127}
                           };
            var commandResult = _testService.Generate(elements, _entityProfile, CancellationToken.None);
            Assert.NotNull(commandResult.Command);
            Assert.IsTrue(commandResult.Command.Contains("127"));
            Assert.IsFalse(commandResult.Command.Contains("@param_"));
        }

        [Test]
        public void Insert_should_not_compile_nullable_short_properties()
        {
            _entityProfile.HasProperty<EntityWithNullableProperty, short?>(x => x.NullableShort);

            var elements = new List<EntityWithNullableProperty>
                           {
                               new EntityWithNullableProperty {NullableShort = 127},
                               new EntityWithNullableProperty {NullableShort = null},
                           };
            var commandResult = _testService.Generate(elements, _entityProfile, CancellationToken.None);
            Assert.NotNull(commandResult.Command);
            Assert.IsTrue(commandResult.Command.Contains("127"));
            Assert.IsTrue(commandResult.Command.Contains("null"));
            Assert.IsFalse(commandResult.Command.Contains("@param_"));
        }
        
        [Test]
        public void Insert_should_not_compile_float_properties()
        {
            _entityProfile.HasProperty<TestEntity, float>(x => x.FloatValue);

            var elements = new List<TestEntity>
                           {
                               new TestEntity {FloatValue = 127.1234f}
                           };
            var commandResult = _testService.Generate(elements, _entityProfile, CancellationToken.None);
            Assert.NotNull(commandResult.Command);
            Assert.IsTrue(commandResult.Command.Contains("127.1234"));
            Assert.IsFalse(commandResult.Command.Contains("@param_"));
        }

        [Test]
        public void Insert_should_not_compile_nullable_float_properties()
        {
            _entityProfile.HasProperty<EntityWithNullableProperty, float?>(x => x.NullableFloat);

            var elements = new List<EntityWithNullableProperty>
                           {
                               new EntityWithNullableProperty {NullableFloat = 127.1234f},
                               new EntityWithNullableProperty {NullableFloat = null},
                           };
            var commandResult = _testService.Generate(elements, _entityProfile, CancellationToken.None);
            Assert.NotNull(commandResult.Command);
            Assert.IsTrue(commandResult.Command.Contains("127.1234"));
            Assert.IsTrue(commandResult.Command.Contains("null"));
            Assert.IsFalse(commandResult.Command.Contains("@param_"));
        }
        
        [Test]
        public void Insert_should_not_compile_double_properties()
        {
            _entityProfile.HasProperty<TestEntity, double>(x => x.DoubleValue);

            var elements = new List<TestEntity>
                           {
                               new TestEntity {DoubleValue = 127.1234d}
                           };
            var commandResult = _testService.Generate(elements, _entityProfile, CancellationToken.None);
            Assert.NotNull(commandResult.Command);
            Assert.IsTrue(commandResult.Command.Contains("127.1234"));
            Assert.IsFalse(commandResult.Command.Contains("@param_"));
        }

        [Test]
        public void Insert_should_not_compile_nullable_double_properties()
        {
            _entityProfile.HasProperty<EntityWithNullableProperty, double?>(x => x.NullableDouble);

            var elements = new List<EntityWithNullableProperty>
                           {
                               new EntityWithNullableProperty {NullableDouble = 127.1234d},
                               new EntityWithNullableProperty {NullableDouble = null},
                           };
            var commandResult = _testService.Generate(elements, _entityProfile, CancellationToken.None);
            Assert.NotNull(commandResult.Command);
            Assert.IsTrue(commandResult.Command.Contains("127.1234"));
            Assert.IsTrue(commandResult.Command.Contains("null"));
            Assert.IsFalse(commandResult.Command.Contains("@param_"));
        }
        
        [Test]
        public void Insert_should_not_compile_decimal_properties()
        {
            _entityProfile.HasProperty<TestEntity, decimal>(x => x.DecimalValue);

            var elements = new List<TestEntity>
                           {
                               new TestEntity {DecimalValue = 127}
                           };
            var commandResult = _testService.Generate(elements, _entityProfile, CancellationToken.None);
            Assert.NotNull(commandResult.Command);
            Assert.IsTrue(commandResult.Command.Contains("127"));
            Assert.IsFalse(commandResult.Command.Contains("@param_"));
        }

        [Test]
        public void Insert_should_not_compile_nullable_decimal_properties()
        {
            _entityProfile.HasProperty<EntityWithNullableProperty, decimal?>(x => x.NullableDecimal);

            var elements = new List<EntityWithNullableProperty>
                           {
                               new EntityWithNullableProperty {NullableDecimal = 127},
                               new EntityWithNullableProperty {NullableDecimal = null},
                           };
            var commandResult = _testService.Generate(elements, _entityProfile, CancellationToken.None);
            Assert.NotNull(commandResult.Command);
            Assert.IsTrue(commandResult.Command.Contains("127"));
            Assert.IsTrue(commandResult.Command.Contains("null"));
            Assert.IsFalse(commandResult.Command.Contains("@param_"));
        }
        
        
        [Test]
        public void Insert_should_not_compile_bool_properties()
        {
            _entityProfile.HasProperty<TestEntity, bool>(x => x.BoolValue);

            var elements = new List<TestEntity>
                           {
                               new TestEntity {BoolValue = true}
                           };
            var commandResult = _testService.Generate(elements, _entityProfile, CancellationToken.None);
            Assert.NotNull(commandResult.Command);
            Assert.IsTrue(commandResult.Command.Contains("true"));
            Assert.IsFalse(commandResult.Command.Contains("@param_"));
        }

        [Test]
        public void Insert_should_not_compile_nullable_bool_properties()
        {
            _entityProfile.HasProperty<EntityWithNullableProperty, bool?>(x => x.NullableBool);

            var elements = new List<EntityWithNullableProperty>
                           {
                               new EntityWithNullableProperty {NullableBool = false},
                               new EntityWithNullableProperty {NullableBool = null},
                           };
            var commandResult = _testService.Generate(elements, _entityProfile, CancellationToken.None);
            Assert.NotNull(commandResult.Command);
            Assert.IsTrue(commandResult.Command.Contains("false"));
            Assert.IsTrue(commandResult.Command.Contains("null"));
            Assert.IsFalse(commandResult.Command.Contains("@param_"));
        }
    }
}