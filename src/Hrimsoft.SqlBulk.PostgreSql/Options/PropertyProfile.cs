using System;
using System.Data;
using System.Linq.Expressions;
using JetBrains.Annotations;
using NpgsqlTypes;

namespace Hrimsoft.SqlBulk.PostgreSql
{
    /// <summary>
    /// A configuration of an entity's property mapping
    /// </summary>
    public class PropertyProfile
    {
        /// <inheritdoc />
        public PropertyProfile(string column, LambdaExpression propertyExpression)
        {
            if (string.IsNullOrWhiteSpace(column))
                throw new ArgumentNullException(nameof(column));

            this.DbColumnName       = column;
            this.PropertyExpression = propertyExpression ?? throw new ArgumentNullException(nameof(propertyExpression));
        }

        /// <summary>
        /// This property is a part of unique constraint.
        /// Is used in upsert constructions
        /// </summary>
        public bool IsPartOfUniqueConstraint { get; private set; }

        /// <summary>
        /// If true then the value of the property that represents this profile will be updated after insert operation.
        /// </summary>
        public bool IsUpdatedAfterInsert { get; private set; }

        /// <summary>
        /// If true then the value of the property that represents this profile will be updated after update operation.
        /// </summary>
        public bool IsUpdatedAfterUpdate { get; private set; }

        /// <summary>
        /// If true this property is an autogenerated property and it's value will not appear in the insert or update commands.
        /// Moreover, such properties will be updated after operation executed.
        /// </summary>
        public bool IsAutoGenerated { get; private set; }

        /// <summary>
        /// If true this property is a private key, but not autogenerated.
        /// In insert operations, instances have to have value in this property.
        /// </summary>
        public bool IsPrivateKey { get; private set; }

        /// <summary>
        /// Expression to access a property 
        /// </summary>
        public LambdaExpression PropertyExpression { get; }

        /// <summary>
        /// Column name in database table 
        /// </summary>
        public string DbColumnName { get; }

        /// <summary>
        /// Database column type
        /// </summary>
        public NpgsqlDbType DbColumnType { get; private set; }

        public bool IsNullable { get; private set; }

        /// <summary>
        /// When applied, the value of the column that represents this property will be included after insert in returning clause
        /// </summary>
        public PropertyProfile MustBeUpdatedAfterInsert()
        {
            this.IsUpdatedAfterInsert = true;
            return this;
        }

        /// <summary>
        /// When applied, the value of the column that represents this property will be included after update in returning clause
        /// </summary>
        public PropertyProfile MustBeUpdatedAfterUpdate()
        {
            this.IsUpdatedAfterUpdate = true;
            return this;
        }

        /// <summary>
        /// When applied, the value of the column that represents this property will be included after insert/update in returning clause
        /// </summary>
        public PropertyProfile ThatIsPrivateKey()
        {
            this.IsPrivateKey = true;
            return this;
        }

        /// <summary>
        /// When applied, a new generated value (from a trigger or sequence) will be assigned to the instance property
        /// </summary>
        public PropertyProfile ThatIsAutoGenerated()
        {
            this.IsAutoGenerated      = true;
            this.IsUpdatedAfterInsert = true;
            return this;
        }

        /// <summary>
        /// Defines which database column type should be used for this property
        /// </summary>
        public PropertyProfile HasColumnType(NpgsqlDbType columnType, Type propertyType)
        {
            this.DbColumnType = columnType;
            this.IsNullable   = propertyType.Name.StartsWith(nameof(Nullable));
            return this;
        }

        /// <summary>
        /// Marks property as a part of unique constraint.
        /// It is needed for upsert operation. <see cref="IPostgreSqlBulkService.UpsertAsync{TEntity}"/> 
        /// </summary>
        public PropertyProfile ThatIsPartOfUniqueConstraint()
        {
            this.IsPartOfUniqueConstraint = true;
            return this;
        }
    }
}