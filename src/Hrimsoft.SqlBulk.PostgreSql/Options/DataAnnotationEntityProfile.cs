using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Linq.Expressions;
using Hrimsoft.SqlBulk.PostgreSql.Attributes;
using Hrimsoft.StringCases;
using NpgsqlTypes;

namespace Hrimsoft.SqlBulk.PostgreSql
{
    /// <summary>
    /// Extends <see cref="EntityProfile"/> with data annotation mapping methods
    /// </summary>
    /// <typeparam name="TEntity"></typeparam>
    public class DataAnnotationEntityProfile<TEntity> : EntityProfile
        where TEntity : class
    {
        public DataAnnotationEntityProfile()
            : base(typeof(TEntity))
        {
            MapTable();
            MapProperties();
        }

        private void MapTable()
        {
            var entityTypeAttributes = EntityType.GetCustomAttributes(true);

            if (entityTypeAttributes.FirstOrDefault(atr => atr is TableAttribute) is TableAttribute tableAttribute)
            {
                var tableName = tableAttribute.Name;
                if (string.IsNullOrWhiteSpace(tableName))
                    tableName = EntityType.Name.ToSnakeCase();

                var schema = tableAttribute.Schema;
                ToTable(tableName, schema);
            }
        }

        private void MapProperties()
        {
            var annotationProperties = EntityType.GetProperties();
            foreach (var propertyInfo in annotationProperties)
            {
                var propertyAttributes = propertyInfo.GetCustomAttributes(true);
                var isNotMapped = false;
                var isKey = false;
                var isPartOfUniqueConstraint = false;
                var isAutoGenerated = false;
                var hasUpdateAfterInsert = false;
                var hasUpdateAfterUpdate = false;
                var columnName = "";
                NpgsqlDbType? columnDbType = null;

                foreach (var attr in propertyAttributes)
                {
                    if (attr is ColumnAttribute columnAttribute)
                    {
                        columnName = columnAttribute.Name;
                    }
                    else if (attr is KeyAttribute keyAttribute)
                    {
                        isKey = true;
                        var typeId = keyAttribute.TypeId;
                    }
                    else if (attr is DataTypeAttribute dataTypeAttribute)
                    {
                        columnDbType = dataTypeAttribute.DataType.ToNpgsql();
                    }
                    else if (attr is NotMappedAttribute notMappedAttribute)
                    {
                        isNotMapped = true;
                    }
                    else if (attr is AutoGeneratedAttribute)
                    {
                        isAutoGenerated = true;
                    }
                    else if (attr is PartOfUniqueConstraintAttribute)
                    {
                        isPartOfUniqueConstraint = true;
                    }
                    else if (attr is UpdateAfterInsertAttribute)
                    {
                        hasUpdateAfterInsert = true;
                    }
                    else if (attr is UpdateAfterUpdateAttribute)
                    {
                        hasUpdateAfterUpdate = true;
                    }
                }

                if (isNotMapped)
                    continue;

                if (string.IsNullOrWhiteSpace(columnName))
                    columnName = propertyInfo.Name.ToSnakeCase();

                if (!columnDbType.HasValue)
                    columnDbType = propertyInfo.PropertyType.ToNpgsql();

                var parameter = Expression.Parameter(EntityType, "entity");
                var property = Expression.Property(parameter, propertyInfo);
                var funcType = typeof(Func<,>).MakeGenericType(EntityType, propertyInfo.PropertyType);
                var lambda = Expression.Lambda(funcType, property, parameter);

                var propertyProfile = new PropertyProfile(columnName, lambda);
                propertyProfile.HasColumnType(columnDbType.Value);
                if (isPartOfUniqueConstraint)
                    propertyProfile.ThatIsPartOfUniqueConstraint();

                this.Properties.Add(propertyInfo.Name, propertyProfile);

                if (isKey)
                    propertyProfile.ThatIsPrivateKey();
                if (isAutoGenerated)
                    propertyProfile.ThatIsAutoGenerated();
                if (hasUpdateAfterInsert)
                    propertyProfile.MustBeUpdatedAfterInsert();
                if (hasUpdateAfterUpdate)
                    propertyProfile.MustBeUpdatedAfterUpdate();
            }
        }
    }
}